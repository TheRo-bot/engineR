package dev.ramar.e2.rendering.awt.drawing.stateless;

import dev.ramar.e2.rendering.drawing.stateless.LineDrawer;
import dev.ramar.e2.rendering.drawing.stateless.LineDrawer.LineMods;
import dev.ramar.e2.rendering.drawing.stateless.LineDrawer.LineMods.CapStyle;
import dev.ramar.e2.rendering.drawing.stateless.LineDrawer.LineMods.JoinStyle;

import dev.ramar.e2.rendering.awt.AWTViewPort;

import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.BasicStroke;

public class AWTLineDrawer extends LineDrawer
{
    private AWTViewPort vpRef;

    public AWTLineDrawer()
    {

    }

    public AWTLineDrawer withViewPort(AWTViewPort vp)
    {
        vpRef = vp;
        return this;
    }



    public int convertCapStyle(CapStyle cs)
    {
        switch(cs)
        {
            case ROUND:
                return BasicStroke.CAP_ROUND;
            case SQUARE:
                return BasicStroke.CAP_SQUARE;

            default:
                return BasicStroke.CAP_BUTT;
        }
    }

    public int convertJoinStyle(JoinStyle js)
    {
        switch(js)
        {
            case BEVEL:
                return BasicStroke.JOIN_BEVEL;

            case ROUND:
                return BasicStroke.JOIN_ROUND;

            default:
                return BasicStroke.JOIN_MITER;
        }
    }


    /*
    Drawing Methods
    -===--------------
    */

    public void pospos(double x1, double y1, double x2, double y2)
    {
        Graphics2D g2d = vpRef.getGraphics();

        LineMods lm = getMod();
        Stroke prevStroke = g2d.getStroke();

        if( lm != null )
        {
            x1 += lm.getOffX();
            y1 += lm.getOffY();

            x2 += lm.getOffX();
            y2 += lm.getOffY();

            g2d.setColor(lm.getColour().convertToColor());
            float thickness = (float)lm.getThickness();

            g2d.setStroke(new BasicStroke(thickness, convertCapStyle(lm.getCapStyle()),
                                          convertJoinStyle(lm.getJoinStyle())));
        }

        g2d.drawLine((int)x1, (int)y1, (int)x2, (int)y2);
        g2d.setStroke(prevStroke);
    }




    public void poslen(double x, double y, double xd, double yd)
    {
        pospos(x, y, x + xd, y + yd);
    }

    private int[] xBuff, yBuff;

    public void pos_linked(double[] xs, double[] ys)
    {
        Graphics2D g2d = vpRef.getGraphics();

        int max = Math.max(xs.length, ys.length);
        // increase buffer size
        if( xBuff == null || max > xBuff.length )
            xBuff = new int[max];

        if( yBuff == null || max > yBuff.length )
            yBuff = new int[max];


        LineMods lm = getMod();
        double xOff = 0, yOff = 0;

        Stroke prevStroke = g2d.getStroke();

        if( lm != null )
        {
            xOff += lm.getOffX();
            yOff += lm.getOffY();

            g2d.setColor(lm.getColour().convertToColor());
            float thickness = (float)lm.getThickness();

            g2d.setStroke(new BasicStroke(thickness, convertCapStyle(lm.getCapStyle()),
                                          convertJoinStyle(lm.getJoinStyle())));
        }

        for( int ii = 0; ii < max; ii++ )
        {
            int toAddX = 0;
            if( xs.length < ii )
                toAddX = (int)(xs[ii] + xOff);

            xBuff[ii] = toAddX;

            int toAddY = 0;
            if( ys.length < ii )
                toAddY = (int)(ys[ii] + yOff);

            yBuff[ii] = toAddY;
        }

        g2d.drawPolyline(xBuff, yBuff, max);
        g2d.setStroke(prevStroke);
    }




}